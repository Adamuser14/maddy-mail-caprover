package module

import (
	"crypto/tls"
	"net"
)

// MsgMetadata structure contains all information about the origin of
// the message and all associated flags indicating how it should be handled
// by components.
//
// All fields should be considered read-only except when otherwise is noted.
// Module instances should avoid keeping reference to the instance passed
// to it since flags may be changed and copy the structure using DeepCopy
// method instead.
type MsgMetadata struct {
	// Unique identifier for this message. Randomly generated by the
	// message source module.
	ID string

	// Original message sender address as it was received by the message source.
	//
	// Note that this field is meant for use for tracing purposes.
	// All routing and other decisions should be made based on the sender address
	// passed separately (for example, mailFrom argument for CheckSender function)
	// Note that addresses may contain unescaped Unicode characters.
	OriginalFrom string

	// Set to true if message is received over SMTP and client is authenticated
	// anonymously.
	Anonymous bool

	// If message is received over SMTP and client is authenticated
	// non-anonymously - this field contains used username.
	AuthUser string
	// If message is received over SMTP and client is authenticated
	// non-anonymously - this field contains used password.
	AuthPassword string

	// IANA protocol name (SMTP, ESMTP, ESMTPS, etc)
	SrcProto string
	// If message is received over SMTPS - TLS connection state.
	SrcTLSState tls.ConnectionState
	// If message is received over SMTP - this field contains
	// the hostname sent by client in EHLO/HELO command.
	SrcHostname string
	// If message is received over SMTP - this field contains
	// network address of client.
	SrcAddr net.Addr

	// Our domain.
	// TODO: Strictly speaking, this field should not be here
	// and should be passed explicitly to functions and objects
	// that need it.
	OurHostname string

	// If set - no SrcHostname and SrcAddr will be added to Received
	// header. These fields are still written to the server log.
	DontTraceSender bool

	// Size of message body. It is updated by pipeline code after each step
	// that changes body.
	BodyLength int
}

// DeepCopy creates a copy of the MsgMetadata structure, also
// copying contents of the maps and slices.
//
// There are a few exceptions, however:
// - SrcAddr is not copied and copy field references original value.
func (msgMeta *MsgMetadata) DeepCopy() *MsgMetadata {
	cpy := *msgMeta
	// There is no good way to copy net.Addr, but it should not be
	// modified by anything anyway so we are safe.
	return &cpy
}
